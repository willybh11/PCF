#!/bin/bash

# exit if any command fails
set -e

# define text types
bold=$(tput bold)
normal=$(tput sgr0)

# retrieve system info
cpu="$(cat /proc/cpuinfo | grep 'name' | uniq )"
cpu=${cpu%CPU*}
cpu=${cpu##*: }
mem="$(cat /proc/meminfo | grep 'MemTotal')"
mem=${mem% kB*}
mem=${mem##*:}
mem="$( echo "scale=1; $mem / 1024 / 1024" | bc -l)"
mdy=$(date +%m-%d-%Y)
version=$(ls /install/PCF | grep 'v')
IFS=' ' read -r -a images <<< "$(echo $(ls /install | grep 'pcf-'))"

# print system info
[[ "$@" == *"-ns"* || "$@" == *"--nostat"* ]] || printf "\nVers:\t${bold}$version${normal}\nDate:\t${bold}$mdy${normal}\nCPU:\t${bold}$cpu${normal}\nMEM:\t${bold}$mem GiB${normal}\n\n"

# retrieve volume and partition info
volumeInfo=( $(lsblk -b -n -o name,size,mountpoint | tr '\n' ' ') )
drives=()
sizes=()

# find unmounted paritions, get sizes
for i in ${!volumeInfo[@]}; do
    if [[ "${volumeInfo[$i]}" == "sd"[[:lower:]] && "${volumeInfo[ "$( echo "$i + 4" | bc )"]}" != *"/"* ]]; then
        drives+=(${volumeInfo[$i]})
        sizes+=( $(echo "${volumeInfo["$( echo "$i + 1" | bc )"]} / 1024^3 - 5" | bc) )
    fi
done

# exit conditions
[[ ${#drives[@]} -eq 0 ]] && (printf "No drives found, exiting.\n" && exit 1)
[[ $(echo "$mem < 1.8" | bc -l ) -eq "1" ]] && printf "Memory is < 2Gib, exiting.\n" && exit 1

# print summary

for i in ${!drives[@]}; do
    printf "${bold}/dev/"${drives[$i]}"1${normal} will be imaged with ${bold}${images[-1]}${normal} and resized to ${bold}${sizes[$i]} GiB${normal}.\n\n"
done

# exit if requested
[[ "$@" == *"-t"* ]] && exit 1

# allow user to safely kill process
# for((j=5;j>0;--j)); do
# 	printf "\rStarting process in $j... (CTRL+C to exit)"; sleep 1
# done
# printf "\r"' %.0s' {1..$COLUMNS}"\r"

for i in ${!drives[@]}; do
    printf "BEGINNING DRIVE #"$(echo "$i + 1" | bc )"...\n"
    printf "process goes here\n"
    printf "DRIVE #"$(echo "$i + 1" | bc )" COMPLETE.\n"
done

exit 1

# apply image
pv </install/"${images[-1]}" >/dev/"$target_volume"

# grow partition
sudo parted /dev/"$target_volume" resizepart 1 "$target_size"G

# grow filesystem to match partition
sudo e2fsck -f /dev/"$target_volume"1
sudo resize2fs -p /dev/"$target_volume"1

# end sequence
(speaker-test -t sine -f 800 )& pid=$! ; sleep 0.3s ; kill -9 $pid
[[ "$@" == *"-np"* || "$@" == *"--nopoweroff"* ]] || poweroff
