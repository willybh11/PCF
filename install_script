#!/bin/bash

# OPTIONS:
# -np (no poweroff) :  Do not poweroff after imaging. 
# -i  (info)        :  Print system info.
# -t  (test)        :  Do not make changes to drives.
# -u  (usb)         :  Use USB image instead of final image.
# -g  (git)         :  Check for updates before running.

# exit if any command fails
set -e

# update if requested
if [[ "$@" == *"-g"* ]]; then
    ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3` > /dev/null && connection="good" || connection="bad"
    printf "Internet connection is: "$connection
    cd /install/PCF
    if [[ $connection == "good" && "$( echo $(sudo git pull))" != *"up-to-date"* ]]; then
        sudo ./install_script $@
        exit 1
    fi
fi

# define text types
bold=$(tput bold)
normal=$(tput sgr0)

# retrieve system info
cpu="$(cat /proc/cpuinfo | grep 'name' | uniq )"
cpu=${cpu%CPU*}
cpu=${cpu##*: }
mem="$(cat /proc/meminfo | grep 'MemTotal')"
mem=${mem% kB*}
mem=${mem##*:}
mem="$( echo "scale=1; $mem / 1024 / 1024" | bc -l)"
# mdy=$(date +%m-%d-%Y)
version=$(ls /install/PCF | grep 'v')
[[ "$@" == *"-u"* ]] || IFS=' ' read -r -a images <<< "$(echo $(ls /install | grep 'pcf'))"
[[ "$@" == *"-u"* ]] && IFS=' ' read -r -a images <<< "$(echo $(ls /install | grep 'usb'))"

# print system info
[[ "$@" == *"-i"* ]] && printf "\nVers:\t${bold}$version${normal}\nCPU:\t${bold}$cpu${normal}\nMEM:\t${bold}$mem GiB${normal}\n\n"

# retrieve volume and partition info
volumeInfo=( $(lsblk -b -n -o name,size,mountpoint | tr '\n' ' ') )
drives=()
sizes=()

# find unmounted paritions, get sizes
for i in ${!volumeInfo[@]}; do
    if [[ "${volumeInfo[$i]}" == "sd"[[:lower:]] && "${volumeInfo[ "$( echo "$i + 4" | bc )"]}" != *"/"* ]]; then
        drives+=(${volumeInfo[$i]})
        sizes+=( $(echo "${volumeInfo["$( echo "$i + 1" | bc )"]} / 1024^3 - 5" | bc) )
    fi
done

# exit conditions
[[ ${#drives[@]} -eq 0 ]] && (printf "No drives found, exiting.\n" && exit 1)
[[ $(echo "$mem < 1.8" | bc -l ) -eq "1" ]] && printf "Memory is < 2Gib, exiting.\n" && exit 1

# check selected drives for partitions
for i in ${!drives[@]}; do
    echo "checking drives for partitions..."
    if [[ "${volumeInfo[@]}" != *"${drives[$i]}1"* ]]; then # create partition if none exist
        echo "  Adding partition to "${drives[$i]}
        sudo parted /dev/sdb mkpart primary ext4 0 1024 ignore
    fi
    echo "...done"
done

# print summary
for i in ${!drives[@]}; do
    printf "${bold}/dev/"${drives[$i]}"1${normal} will be imaged with ${bold}${images[-1]}${normal} and resized to ${bold}${sizes[$i]} GiB${normal}.\n"
done

# exit if requested
[[ "$@" == *"-t"* ]] && exit 1

for i in ${!drives[@]}; do
    printf "\nDRIVE #"$(echo "$i + 1" | bc )"\n"

    # apply image
    printf "IMAGING:\n"
    pv </install/"${images[-1]}" >/dev/"${drives[$i]}"

    # grow partition
    printf "RESIZING PARTITION:\n"
    umount /dev/"${drives[$i]}"1
    sudo parted /dev/"${drives[$i]}" resizepart 1 "${sizes[$i]}"G

    # grow filesystem to match partition
    printf "RESIZING FILESYSTEM:\n"
    sudo e2fsck -f /dev/"${drives[$i]}"1
    sudo resize2fs -p /dev/"${drives[$i]}"1

    printf "DRIVE COMPLETE.\n\n"
done

(speaker-test -t sine -f 800 )& pid=$! ; sleep 0.3s ; kill -9 $pid

# poweroff if requested
[[ "$@" == *"-np"* ]] || poweroff
