#!/bin/bash

# OPTIONS:
# -t (--test)       :  Do not make changes to drives.
# -u (--usb)        :  Use USB image instead of final image; do not print system info
# -g (--git)        :  Check for updates before running.

# exit if any command fails
set -e

# define text types
bold=$(tput bold)
normal=$(tput sgr0)

# update if requested
if [[ "$@" == *"-g"* ]]; then
    cd /install/PCF
    git_output="$( echo $(sudo git pull))"
    if [[ git_output == *"up-to-date"* ]]
    then
        printf "Script is up to date!"
    elif [[ git_output == *"Could not resolve hostname github.com"* ]]; then
        printf "No internet connection; cannot update."
    else 
        sudo ./install_script $@
        exit 1
    fi
fi

if [[ "$@" == *"-u"* ]]
then    # we are imaging a USB
    IFS=' ' read -r -a images <<< "$(echo $(ls /install | grep 'usb'))"

else    # we are imaging a drive
    # retrieve system info
    IFS=' ' read -r -a images <<< "$(echo $(ls /install | grep 'pcf'))"
    image="${images[-1]}"
    cpu="$(cat /proc/cpuinfo | grep 'name' | uniq )"
    cpu=${cpu%CPU*}
    cpu=${cpu##*: }
    mem="$(cat /proc/meminfo | grep 'MemTotal')"
    mem=${mem% kB*}
    mem=${mem##*:}
    mem="$( echo "scale=1; $mem / 1024 / 1024" | bc -l)"
    version=$(ls /install/PCF | grep 'v')

    printf "\nVers:\t${bold}$version${normal}\nCPU:\t${bold}$cpu${normal}\nMEM:\t${bold}$mem GiB${normal}\n\n"

    [[ $(echo "$mem < 1.8" | bc -l ) -eq "1" ]] && printf "Memory is < 2Gib, exiting.\n" && exit 1

fi

# retrieve volume and partition info
volumeInfo=( $(lsblk -b -n -o name,size,mountpoint | tr '\n' ' ') )
drives=()
sizes=()

# find unmounted paritions, get sizes
for i in ${!volumeInfo[@]}; do
    if [[ "${volumeInfo[$i]}" == "sd"[[:lower:]] && "${volumeInfo[ "$( echo "$i + 4" | bc )"]}" != *"/"* ]]; then
        drives+=(${volumeInfo[$i]})
        sizes+=( $(echo "${volumeInfo["$( echo "$i + 1" | bc )"]} / 1024^3 - 5" | bc) )
    fi
done

# exit conditions
[[ ${#drives[@]} -eq 0 ]] && (printf "No drives found, exiting.\n" && exit 1)

# print summary
for i in ${!drives[@]}; do
    printf "${bold}/dev/"${drives[$i]}"1${normal} will be imaged with ${bold}${images[-1]}${normal} and resized to ${bold}${sizes[$i]} GiB${normal}.\n"
done

# exit if requested
[[ "$@" == *"-t"* ]] && exit 1

for i in ${!drives[@]}; do
    [[ "$@" == *"-u"* ]] && printf "\nBEGINNING DRIVE #"$(echo "$i + 1" | bc )"...\n"

    # apply image
    pv </install/"$image" >/dev/"${drives[$i]}"

    # grow partition
    sudo parted /dev/"${drives[$i]}" resizepart 1 "${sizes[$i]}"G

    # grow filesystem to match partition
    sudo e2fsck -f /dev/"${drives[$i]}"1
    sudo resize2fs -p /dev/"${drives[$i]}"1

    [[ "$@" == *"-u"* ]] && printf "DRIVE COMPLETE.\n"
done

(speaker-test -t sine -f 800 )& pid=$! ; sleep 0.3s ; kill -9 $pid

# poweroff if necessary
[[ "$@" == *"-u"* ]] || poweroff
