#!/bin/bash

# exit if any command fails
set -e

# define text types
bold=$(tput bold)
normal=$(tput sgr0)

# check for and apply newest version

# retrieve system info
cpu="$(cat /proc/cpuinfo | grep 'name' | uniq )"
cpu=${cpu%CPU*}
cpu=${cpu##*: }
mem="$(cat /proc/meminfo | grep 'MemTotal')"
mem=${mem% kB*}
mem=${mem##*:}
mem="$( echo "scale=1; $mem / 1024 / 1024" | bc -l)"
mdy=$(date +%m-%d-%Y)

# print system info
[[ "$@" == *"-ns"* || "$@" == *"--nostat"* ]] || printf "\nCPU: ${bold}$cpu${normal}\nMEM: ${bold}$mem GiB${normal}\n\n"

# retrieve and parse volumes and partitions
IFS=' ' read -r -a array <<< "$(echo $(lsblk -b -n -o name,size,mountpoint) | tr -d '\n')"

# find unmounted parition
i=0
for target_volume in ${array[@]}; do
    [[ "$target_volume" == "sd"[[:lower:]] && "${array[ "$( echo "$i + 4" | bc )"]}" != *"/"* ]] && break
    i=$( echo "$i + 1" | bc)
done

# get size of drive to partition
target_size="$( echo "${array["$( echo "$i + 1" | bc )"]} / 1024^3 - 5" | bc )"

# exit conditions
[[ "$target_volume" == "sd"[[:lower:]] ]] || (printf "Drive not found, exiting.\n" && exit 1)
[[ $(echo "$mem < 1.8" | bc -l ) -eq "1" ]] && printf "Memory is < 2Gib, exiting.\n" && exit 1

# print summary
printf "${bold}/dev/"$target_volume"1${normal} will be imaged and resized to ${bold}$target_size GiB${normal}.\n\n"

# exit if requested
[[ "$@" == *"-t"* ]] && exit 1

# allow user to safely kill process
for((j=5;j>0;--j)); do
	printf "\rStarting process in $j... (CTRL+C to exit)"; sleep 1
done
printf "\r"

# apply image
pv </install/pcf.img >/dev/"$target_volume"

# grow partition
sudo parted /dev/"$target_volume" resizepart 1 "$target_size"G

# grow filesystem to match partition
sudo e2fsck -f /dev/"$target_volume"1
sudo resize2fs -p /dev/"$target_volume"1

# end sequence
(speaker-test -t sine -f 800 )& pid=$! ; sleep 0.3s ; kill -9 $pid
[[ "$@" == *"-np"* || "$@" == *"--nopoweroff"* ]] || poweroff
