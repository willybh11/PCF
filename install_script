#!/bin/bash

# OPTIONS:
# -np (no poweroff) :  Does not poweroff after imaging.
# -i  (info)        :  Prints system info.
# -t  (test)        :  Does not make changes to drives.
# -u  (usb)         :  Uses USB image instead of final image. Doesn't poweroff after imaging.
# -g  (git)         :  Checks for updates (and potentially update the script) before running.

# exit if any command fails
set -e

# define text types
bold=$(tput bold)
normal=$(tput sgr0)

# update if requested
if [[ "$@" == *"-g"* ]]; then
    ping -q -w 1 -c 1 `ip r | grep default | cut -d ' ' -f 3` > /dev/null && connection="good" || connection="bad"
    printf "${bold}Internet connection is: ${normal}$connection\n"
    printf "${bold}Attempmting update...\n${normal}"
    cd /install/PCF
    if [[ $connection == "good" && "$( echo $(sudo git pull))" != *"up-to-date"* ]]; then
        sudo ./install_script $@
        exit 1
    else 
        echo "${bold}...no update found.${normal}"
    fi
fi



# retrieve system info
cpu="$(cat /proc/cpuinfo | grep 'name' | uniq )"
cpu=${cpu%CPU*}
cpu=${cpu##*: }
mem="$(cat /proc/meminfo | grep 'MemTotal')"
mem=${mem% kB*}
mem=${mem##*:}
mem="$( echo "scale=1; $mem / 1024 / 1024" | bc -l)"
[[ "$@" == *"-u"* ]] || IFS=' ' read -r -a images <<< "$(echo $(ls /install | grep 'pcf'))"
[[ "$@" == *"-u"* ]] && IFS=' ' read -r -a images <<< "$(echo $(ls /install | grep 'usb'))"

# print system info
[[ "$@" == *"-i"* ]] && printf "${bold}\nCPU:\t${bold}$cpu${normal}\nMEM:\t${bold}$mem GiB${normal}\n\n${normal}"

# unmount if necessary
if [[ "$@" != *"-u"* ]]; then
    printf "${bold}checking for mounted drives...${normal}"
    num=$(grep -o "/sd" <<< "$(findmnt -lo source)" | wc -l)
    rootfs=$(readlink -f /dev/block/$(mountpoint -d /))
    if [ "$num" -gt "1" ]; then
        printf "${bold}unmounting...${normal}\n"
        if [[ "$rootfs" == *"b"* ]]; then
            sudo umount /dev/sda?* || true
        elif [[ "$rootfs" == *"a"* ]]; then
            sudo umount /dev/sdb?* || true
        fi
        printf "${bold}...done${normal}\n"
    else
        printf "${bold}No need to unmount.${normal}\n"
    fi
fi

# retrieve volume and partition info
volumeInfo=( $(lsblk -b -n -o name,size,mountpoint | tr '\n' ' ') )
drives=()
sizes=()

# find unmounted paritions, get sizes
for i in ${!volumeInfo[@]}; do
    if [[ "${volumeInfo[$i]}" == "sd"[[:lower:]] && "${volumeInfo[ "$( echo "$i + 4" | bc )"]}" != *"/"* ]]; then
        drives+=(${volumeInfo[$i]})
        sizes+=( $(echo "${volumeInfo["$( echo "$i + 1" | bc )"]} / 1024^3 - 5" | bc) )
    fi
done

# exit conditions
[[ ${#drives[@]} -eq 0 ]] && (printf "No drives found, exiting.\n" && exit 1)
[[ $(echo "$mem < 1.8" | bc -l ) -eq "1" ]] && printf "Memory is < 2Gib, exiting.\n" && exit 1

# print summary
for i in ${!drives[@]}; do
    printf "${bold}/dev/"${drives[$i]}"${normal} will be imaged with ${bold}${images[-1]}${normal} and resized to ${bold}${sizes[$i]} GiB${normal}.\n"
done

# exit if in test mode
[[ "$@" == *"-t"* ]] && exit 1


# wipe drives and add partitions
for i in ${!drives[@]}; do
    printf "${bold}wiping drive /dev/${drives[$i]}...\n${normal}"
    sudo wipefs -a /dev/"${drives[$i]}"
    printf "${bold}...done\n${normal}"
    printf "${bold}Adding partition to ${drives[$i]} ...\n${normal}"
	sudo parted /dev/"${drives[$i]}" mklabel gpt
    sudo parted /dev/"${drives[$i]}" mkpart primary ext4 0% 100%
    printf "${bold}...done\n${normal}"
done

# image and resize drives
for i in ${!drives[@]}; do
    printf "${bold}\nDRIVE #"$(echo "$i + 1" | bc )"\n${normal}"

    printf "${bold}IMAGING...\n${normal}"
    pv </install/"${images[-1]}" >/dev/"${drives[$i]}"

    printf ${bold}"RESIZING EXTENDED PARTITION...\n${normal}"
    sudo parted /dev/"${drives[$i]}" resizepart 2 "${sizes[$i]}"G
    printf "${bold}RESIZING LOGICAL PARTITION... \n${normal}"
    sudo parted /dev/"${drives[$i]}" resizepart 5 "${sizes[$i]}"G

    printf "${bold}RESIZING FILESYSTEM...\n${normal}"
    sudo e2fsck -f -p /dev/"${drives[$i]}"5
    sudo resize2fs -p /dev/"${drives[$i]}"5

    printf "${bold}DRIVE COMPLETE.\n\n${normal}"
done

# reboot if requested
[[ "$@" == *"-np"* ]] || [[ "$@" == *"-u"* ]] || reboot
